{
	"info": {
		"_postman_id": "d77849e7-9378-47a1-8573-19af515e7ce7",
		"name": "API Products update - Test Cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23361327"
	},
	"item": [
		{
			"name": "Functional",
			"item": [
				{
					"name": "TC_01 - Update with full valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains all required fields\", function () {",
									"    const json = pm.response.json();",
									"    const expectedFields = [",
									"        \"_id\", \"name\", \"price\", \"image\", \"brand\", \"category\",",
									"        \"description\", \"rating\", \"numReviews\", \"countInStock\",",
									"        \"reviews\", \"__v\", \"createdAt\", \"updatedAt\"",
									"    ];",
									"    expectedFields.forEach(field => {",
									"        pm.expect(json).to.have.property(field);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "Bearer {{adminToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2ZjY2FkMGVlMTEzZDY4NzZmYjg0ODEiLCJpYXQiOjE3NDU2NDc4NjQsImV4cCI6MTc0ODIzOTg2NH0.MesgblkTGy04Vfpssrujvq867hqCzzfMNlQE5MNjQIw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"_id\": \"68088ebfd55db82994df17ce\",\n            \"user\": \"67fccad0ee113d6876fb8481\",\n            \"name\": \"Sample name\",\n            \"image\": \"/images/sample.jpg\",\n            \"brand\": \"Sample brand\",\n            \"category\": \"Sample category\",\n            \"description\": \"Sample description\",\n            \"rating\": 0,\n            \"numReviews\": \"bad format\",\n            \"price\": 100,\n            \"countInStock\": 0,\n            \"reviews\": \"bad format\",\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\n            \"__v\": 0\n        }"
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{validId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_03 - Update non-existing product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response message is 'Product not found'\", function () {",
									"    const json = pm.response.json();",
									"    pm.expect(json.message).to.include(\"Product not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2ZjY2FkMGVlMTEzZDY4NzZmYjg0ODEiLCJpYXQiOjE3NDU2NDc4NjQsImV4cCI6MTc0ODIzOTg2NH0.MesgblkTGy04Vfpssrujvq867hqCzzfMNlQE5MNjQIw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Product\",\n  \"price\": 100,\n  \"description\": \"Updated description\",\n  \"image\": \"/images/sample.jpg\",\n  \"brand\": \"BrandX\",\n  \"category\": \"CategoryX\",\n  \"countInStock\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{notExistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{notExistId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_04 Send empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain validation error for all required fields\", function () {\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    pm.expect(res).to.have.property(\"message\");\r",
									"    pm.expect(res.message).to.include(\"Product validation failed\");\r",
									"\r",
									"    const requiredFields = [\"name\", \"price\", \"description\", \"image\", \"brand\", \"category\", \"countInStock\"];\r",
									"\r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(res.message).to.include(`Path \\`${field}\\` is required`);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_05 Missing name (required field)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should indicate missing 'name' field\", function () {\r",
									"    const res = pm.response.json();\r",
									"\r",
									"    pm.expect(res).to.have.property(\"message\");\r",
									"    pm.expect(res.message).to.include(\"Product validation failed\");\r",
									"    pm.expect(res.message).to.include(\"Path `name` is required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_06 Invalid data type: price = \"abc\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_06: Status code should be 400 or 500\", function () {\r",
									"    pm.expect([400, 500]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_06: Response should mention invalid 'price' type\", function () {\r",
									"    if (pm.response.code === 500) {\r",
									"        pm.expect(pm.response.text()).to.include(\"Unexpected token\");\r",
									"    } else {\r",
									"        const res = pm.response.json();\r",
									"        pm.expect(res.message || res.error).to.include(\"price\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": \"abc\",\r\n            \"countInStock\": 0,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_07 Invalid data type countInStock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_07: Status code should be 400 or 500\", function () {\r",
									"    pm.expect([400, 500]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_07: Response should mention invalid 'countInStock' type\", function () {\r",
									"    if (pm.response.code === 500) {\r",
									"        pm.expect(pm.response.text()).to.include(\"Unexpected token\");\r",
									"    } else {\r",
									"        const res = pm.response.json();\r",
									"        pm.expect(res.message || res.error).to.include(\"countInStock\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100,\r\n            \"countInStock\": \"ten\",\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_08 Negative price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_08: Status code should be 400 or 200\", function () {\r",
									"    pm.expect([400, 200]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_08: Price must be >= 0 if 400\", function () {\r",
									"    if (pm.response.code === 400) {\r",
									"        const res = pm.response.json();\r",
									"        pm.expect(res.message || res.error).to.include(\"price\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": -100,\r\n            \"countInStock\": 0,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_09 Very large price and countInStock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_09: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_09: Product updated successfully\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.message.toLowerCase()).to.include(\"updated\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100000000000000000000000,\r\n            \"countInStock\": 1000000000000000000000000000000,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_10 Rating as float instead of integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_10: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_10: Rating accepted as float\", function () {\r",
									"    const res = pm.response.json();\r",
									"    if (res.rating !== undefined) {\r",
									"        pm.expect(typeof res.rating).to.eql(\"number\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 3.5,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100,\r\n            \"countInStock\": 0,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "TC_11 Invalid ID format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_11: Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_11: Response should mention invalid ID or not found\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.message || res.error).to.match(/(invalid|not found)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{InvalidID}}",
							"host": [
								"{{env_variable}}{{InvalidID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_12 SQL Injection in ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_12: Status code is 404 or 400\", function () {\r",
									"    pm.expect([404, 400]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_12: Response should mention product not found or validation failed\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.message || res.error).to.match(/(not found|validation failed)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}1'or'1'='1",
							"host": [
								"{{env_variable}}1'or'1'='1"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_13 – XSS in name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_13: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_13: Name field must be sanitized\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.name).to.not.include(\"<script>\");\r",
									"    pm.expect(res.name).to.not.include(\"</script>\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"<script>alert(1)</script>\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100,\r\n            \"countInStock\": 0,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_14 – Send without Authorization token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_15: Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_15: Response should mention missing token\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.message || res.error).to.match(/(not authorized|missing token)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_15 – Invalid Authorization format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_17: Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Invalid token format error message\", function () {\r",
									"    var res = pm.response.json();\r",
									"    pm.expect(\r",
									"        res.message.toLowerCase()\r",
									"    ).to.satisfy(function (msg) {\r",
									"        return msg.includes(\"not authorized\") || msg.includes(\"no token\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "ncklnakmasmckssssssssssssssjwiueuehuhefbfhbfvhbhvbhvbhbdsjndsjnj",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_16 - Token of non-admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 or 401\", function () {",
									"    pm.expect([401, 403]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Not authorized as admin message\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(",
									"        res.message.toLowerCase()",
									"    ).to.satisfy(function (msg) {",
									"        return msg.includes(\"not authorized\") || msg.includes(\"admin only\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"_id\": \"68088ebfd55db82994df17ce\",\n            \"user\": \"67fccad0ee113d6876fb8481\",\n            \"name\": \"Sample name\",\n            \"image\": \"/images/sample.jpg\",\n            \"brand\": \"Sample brand\",\n            \"category\": \"Sample category\",\n            \"description\": \"Sample description\",\n            \"rating\": 0,\n            \"numReviews\": \"bad format\",\n            \"price\": 100,\n            \"countInStock\": 0,\n            \"reviews\": \"bad format\",\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\n            \"__v\": 0\n        }"
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_17 – Missing Content-Type header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_18: Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_18: Response should mention Content-Type required\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.message || res.error).to.match(/(content-type|required)/i);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_19 – Wrong Content-Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_19: Status code is 415 or 400\", function () {\r",
									"    pm.expect([415, 400]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_19: Response should mention invalid content-type\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.message || res.error).to.match(/(content-type|invalid)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_20 Send extra invalid fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_20: Status code is 200 or 400\", function () {\r",
									"    pm.expect([200, 400]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_20: Extra fields should be ignored or cause error\", function () {\r",
									"    const res = pm.response.json();\r",
									"    if (pm.response.code === 200) {\r",
									"        pm.expect(res).to.not.have.property('extraField');\r",
									"    } else if (pm.response.code === 400) {\r",
									"        pm.expect(res.message || res.error).to.match(/(invalid|unexpected)/i);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100,\r\n            \"countInStock\": 0,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0,\r\n            \"extraField\": \"unexpected\"\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_22\tUpdate product with empty reviews array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_22: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_22: Reviews array should be empty\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property('reviews');\r",
									"    pm.expect(res.reviews).to.be.an('array').that.is.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100,\r\n            \"countInStock\": 0,\r\n            \"reviews\": [],\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Structure",
			"item": [
				{
					"name": "TC_S01 – Missing product ID in URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_S01: Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_S01: Message indicates endpoint not found\", function () {\r",
									"    const res = pm.response.text();\r",
									"    pm.expect(res).to.match(/(not\\s*found|cannot\\s*PUT)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}",
							"host": [
								"{{env_variable}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_S02-Incorrect endpoint path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_S02: Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_S02: Message indicates endpoint not found\", function () {\r",
									"    const res = pm.response.text();\r",
									"    pm.expect(res).to.match(/(not\\s*found|cannot\\s*PUT)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/product{{validId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"product{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_S03 – Extra slash at the end of the URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_S03: Status code is 200 or 404\", function () {\r",
									"    pm.expect([200, 404]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_S03: Response indicates success or not found\", function () {\r",
									"    const res = pm.response.text();\r",
									"    if (pm.response.code === 404) {\r",
									"        pm.expect(res).to.match(/(not\\s*found|cannot\\s*PUT)/i);\r",
									"    } else {\r",
									"        const json = pm.response.json();\r",
									"        pm.expect(json).to.have.property('name');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994df17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100,\r\n            \"countInStock\": 0,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{env_variable}}{{validId}}/",
							"host": [
								"{{env_variable}}{{validId}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_S04 – Extra path after the valid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_S04: Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_S04: Message indicates invalid path\", function () {\r",
									"    const res = pm.response.text();\r",
									"    pm.expect(res).to.match(/(not\\s*found|cannot\\s*PUT)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}/extra",
							"host": [
								"{{env_variable}}{{validId}}"
							],
							"path": [
								"extra"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_S06 – Using wrong HTTP method (POST)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"TC_S06: Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"TC_S06: Wrong method detected\", function () {\r",
									"    const res = pm.response.text();\r",
									"    pm.expect(res).to.match(/(not\\s*found|cannot\\s*POST)/i);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{env_variable}}{{validId}}",
							"host": [
								"{{env_variable}}{{validId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_S07 – Wrong domain (localhost:4000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"if (!pm.response) {\r",
									"    console.log(\"No response received - likely connection error or wrong domain.\");\r",
									"    pm.test(\"Should fail to connect due to wrong domain\", function () {\r",
									"        pm.expect(false, \"Request should not succeed\").to.be.false;\r",
									"    });\r",
									"} else {\r",
									"    // Nếu có response (ví dụ server ở 3000 vẫn trả về 404 hoặc lỗi khác)\r",
									"    pm.test(\"Status should be 404 Not Found or other error\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([404, 400, 403]);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"_id\": \"68088ebfd55db82994dc17ce\",\r\n            \"user\": \"67fccad0ee113d6876fb8481\",\r\n            \"name\": \"Sample name\",\r\n            \"image\": \"/images/sample.jpg\",\r\n            \"brand\": \"Sample brand\",\r\n            \"category\": \"Sample category\",\r\n            \"description\": \"Sample description\",\r\n            \"rating\": 0,\r\n            \"numReviews\": \"bad format\",\r\n            \"price\": 100,\r\n            \"countInStock\": 0,\r\n            \"reviews\": \"bad format\",\r\n            \"createdAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"updatedAt\": \"2025-04-23T06:54:55.853Z\",\r\n            \"__v\": 0\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/products{{validId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products{{validId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000"
		},
		{
			"key": "validId",
			"value": "68088ebfd55db82994df17ce"
		},
		{
			"key": "notExistId",
			"value": "609e1258461c2b0015b70898"
		},
		{
			"key": "adminToken",
			"value": "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2ZjY2FkMGVlMTEzZDY4NzZmYjg0ODEiLCJpYXQiOjE3NDU2NDc4NjQsImV4cCI6MTc0ODIzOTg2NH0.MesgblkTGy04Vfpssrujvq867hqCzzfMNlQE5MNjQIw"
		},
		{
			"key": "userToken",
			"value": "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2N2ZjY2ZiNDc0YWQ4MmRlMTEwMjY3YzciLCJpYXQiOjE3NDU2NDkwNzMsImV4cCI6MTc0ODI0MTA3M30.gL3XaIVyHPE1HFWgx8PKPArXyJSMydoul96ph_4abgc"
		},
		{
			"key": "InvalidID",
			"value": "/123-invalid",
			"type": "string"
		}
	]
}